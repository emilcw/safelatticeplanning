<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">


	This file starts an octomap server that initializes with a given .bt map.


-->
<launch>
  <arg name='resolution'/>
  <arg name='max_range'/>
  <arg name='map'/>

	<node pkg="octomap_server" type="octomap_server_node" args="$(find collision_avoidance_m100_gazebo)/octomaps/$(arg map)" name="octomap_server">
		<param name="resolution" value="$(arg resolution)" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="/world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="$(arg max_range)" />
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/converted_pc" />
	
	</node>
</launch>
